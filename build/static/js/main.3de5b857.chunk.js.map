{"version":3,"sources":["constants/URI.js","components/FeedItem/FeedItem.js","components/UI/TodoModal.js","components/FeedItem/List.js","components/UI/PolicyModal.js","components/Feed.js","components/Auth/Auth.js","App.js","serviceWorker.js","index.js"],"names":["exports","URI","item","props","Accordion","defaultActiveKey","className","Card","bg","done","border","Header","Toggle","as","Button","variant","eventKey","title","Collapse","Body","Text","description","Form","Check","type","label","size","checked","onChange","checkedHandler","ButtonGroup","onClick","onModal","onDelete","ModalForm","Modal","show","onHide","modalHandler","closeButton","Title","modalTitle","onSubmit","event","preventDefault","_id","target","value","Group","Label","Control","placeholder","defaultValue","name","Footer","require","List","useState","modalShow","setModalShow","token","setToken","setUserId","feedItem","setFeedItem","message","error","setError","useEffect","localStorage","getItem","items","map","console","log","modalSubmitHandler","a","fetch","method","headers","body","JSON","stringify","result","status","json","res","fetchItems","doneToggle","deleteHandler","id","deleteListHandler","Container","Alert","length","key","PolicyModal","showModal","onToggle","policy","email","password","admin","Feed","data","setData","user","setUser","userId","loading","setLoading","listTitle","setListTitle","cookieShow","setCookieShow","setShowModal","response","JSONdata","catchError","toggleModal","addListHandler","Spinner","animation","Heading","Row","onLogout","Col","xs","InputGroup","FormControl","e","aria-label","Append","Auth","setEmail","setPassword","role","setRole","showAlert","onLogin","block","deleteUser","withRouter","isAuth","setIsAuth","getUser","expiryDate","Date","logoutHandler","removeItem","signupHandler","policyModal","accept","loginHandler","setItem","getTime","toISOString","routes","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3de5b857.chunk.js","sourcesContent":["exports.URI = \"https://dashboard.heroku.com/apps/pacific-lowlands-63185\";\r\n//\"http://localhost:8080\"\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst item = props => {\r\n    return (\r\n        <Accordion defaultActiveKey=\"1\" className=\"justify-content-md-center\">\r\n            <Card className=\"text-center\" bg={props.item.done ? 'secondary' : null} border=\"info\">\r\n                <Card.Header><Accordion.Toggle as={Button} variant=\"button\" eventKey=\"0\">{props.item.done ? \"DONE  \" : null}{props.item.title}</Accordion.Toggle></Card.Header>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    {props.item ?\r\n                        <Card.Body>\r\n                            <Card.Text>{props.item.description}</Card.Text>\r\n                            <Form className=\"my-3\">\r\n                                <Form.Check type=\"checkbox\" label=\"done\" size=\"lg\" checked={item.done} onChange={() => props.checkedHandler(item)}></Form.Check>\r\n                            </Form>\r\n                            <ButtonGroup className=\"d-flex justify-content-around\">\r\n                                <Button className=\"mx-2\" variant=\"primary\" onClick={() => props.onModal(item)}>Update</Button>\r\n                                <Button className=\"mx-2\" variant=\"danger\" onClick={props.onDelete}>Delete</Button>\r\n                            </ButtonGroup>\r\n                        </Card.Body>\r\n                        : null}\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n    )\r\n}\r\n\r\nexport default item","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ModalForm = (props) => {\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        props.modalHandler();\r\n        let item;\r\n        if (props.item) {\r\n            item = {\r\n                _id: props.item._id,\r\n                title: event.target.title.value,\r\n                description: event.target.description.value\r\n            }\r\n        }\r\n        else {\r\n            item = {\r\n                title: event.target.title.value,\r\n                description: event.target.description.value\r\n            }\r\n        }\r\n        props.onSubmit(item);\r\n    }\r\n\r\n    return (\r\n        <Modal show={props.show} onHide={props.modalHandler} size=\"md\">\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={submitHandler}>\r\n                <Modal.Body>\r\n                    <Form.Group>\r\n                        <Form.Label>Title</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter a Title\" defaultValue={props.item ? props.item.title : ''} name=\"title\" />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Description</Form.Label>\r\n                        <Form.Control as=\"textarea\" placeholder=\"Enter a description\" defaultValue={props.item ? props.item.description : ''} name=\"description\" />\r\n                    </Form.Group>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={props.modalHandler}>Close</Button>\r\n                    <Button type=\"submit\" variant=\"primary\">Save</Button>\r\n                </Modal.Footer>\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalForm;","import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Item from './FeedItem';\r\nimport Modal from '../UI/TodoModal';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Alert from 'react-bootstrap/Alert';\r\nconst { URI } = require(\"../../constants/URI\");\r\n\r\nconst List = props => {\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [token, setToken] = useState(null);\r\n    const [userId, setUserId] = useState(null);\r\n    const [feedItem, setFeedItem] = useState(null);\r\n    const [error, setError] = useState({\r\n        message: null,\r\n        variant: null\r\n    });\r\n\r\n    useEffect(() => {\r\n        setToken(localStorage.getItem(\"token\"));\r\n        setUserId(localStorage.getItem(\"userId\"));\r\n        props.item.items.map(item => console.log(item))\r\n    }, [])\r\n\r\n    const modalHandler = (item) => {\r\n        if (modalShow === true) {\r\n            setModalShow(false)\r\n        }\r\n        else setModalShow(true);\r\n        if (item) setFeedItem(item);\r\n    }\r\n\r\n    const modalSubmitHandler = async (item) => {\r\n        modalHandler();\r\n        try {\r\n            console.log(item);\r\n            if (item._id) {\r\n                //update\r\n                const result = await fetch(URI + \"/todo/item\", {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        \"Content-Type\": 'application/json',\r\n                        \"Authorization\": 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify(item)\r\n                })\r\n                if (result.status !== 200 && result.status !== 201) {\r\n                    const res = await result.json()\r\n                    setError({\r\n                        message: res.message,\r\n                        variant: \"danger\"\r\n                    })\r\n                    return res;\r\n                }\r\n                props.fetchItems();\r\n                return await result.json();\r\n            }\r\n            //create\r\n            else {\r\n                const result = await fetch(URI + \"/todo/\" + props.item._id, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": 'application/json',\r\n                        \"Authorization\": 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify(item)\r\n                });\r\n                //console.log(json)\r\n                if (result.status !== 200 && result.status !== 201) {\r\n                    const res = await result.json()\r\n                    setError({\r\n                        message: res.message,\r\n                        variant: \"danger\"\r\n                    })\r\n                    return res;\r\n                }\r\n                props.fetchItems();\r\n                return await result.json();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            //catchError(error);\r\n        }\r\n    }\r\n\r\n    const checkedHandler = async (item) => {\r\n        try {\r\n            //update\r\n            let doneToggle = item.done ? false : true;\r\n            const result = await fetch(URI + \"/todo/item\", {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": 'application/json',\r\n                    \"Authorization\": 'Bearer ' + token\r\n                },\r\n                body: JSON.stringify({ ...item, done: doneToggle })\r\n            })\r\n            if (result.status !== 200 && result.status !== 201) {\r\n                const res = await result.json()\r\n                setError({\r\n                    message: res.message,\r\n                    variant: \"danger\"\r\n                })\r\n                return res;\r\n            }\r\n            props.fetchItems();\r\n            return await result.json();\r\n        } catch (error) {\r\n            //catchError(error);\r\n        }\r\n    }\r\n\r\n    const deleteHandler = async (id) => {\r\n        try {\r\n            const result = await fetch(URI + \"/todo/item/\" + id, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": 'application/json',\r\n                    \"Authorization\": 'Bearer ' + token\r\n                }\r\n            });\r\n            if (result.status !== 200 && result.status !== 201) {\r\n                const res = await result.json()\r\n                console.log(res.message);\r\n                setError({\r\n                    message: res.message,\r\n                    variant: \"danger\"\r\n                })\r\n                return res;\r\n            }\r\n            props.fetchItems();\r\n            return result.json();\r\n        } catch (error) {\r\n            //catchError(error);\r\n        }\r\n    }\r\n\r\n    const deleteListHandler = async (id) => {\r\n        try {\r\n            const result = await fetch(URI + \"/todo/list/\" + id, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": 'application/json',\r\n                    \"Authorization\": 'Bearer ' + token\r\n                }\r\n            });\r\n            if (result.status !== 200 && result.status !== 201) {\r\n                const res = await result.json()\r\n                console.log(res.message);\r\n                setError({\r\n                    message: res.message,\r\n                    variant: \"danger\"\r\n                })\r\n                return res;\r\n            }\r\n            props.fetchItems();\r\n            return result.json();\r\n        } catch (error) {\r\n            //catchError(error);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Alert variant={error.variant} show={error.message ? true : false}>\r\n                {error.message}\r\n            </Alert>\r\n            <Card className=\"text-center m-3\">\r\n                <Card.Header>{props.item.title}</Card.Header>\r\n                <Card.Body>\r\n                    {props.item.items.length !== 0 ? props.item.items.map(item => (\r\n                        <Item item={item} onModal={() => modalHandler(item)} key={item._id} checkedHandler={() => checkedHandler(item)} onDelete={() => deleteHandler(item._id)} />\r\n                    )) : null}\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <ButtonGroup className=\"d-flex justify-content-around\">\r\n                        <Button variant=\"info\" className=\"mx-3\" onClick={modalHandler}>Add Item</Button>\r\n                        <Button variant=\"danger\" className=\"mx-3\" onClick={() => deleteListHandler(props.item._id)}>Delete List</Button>\r\n                    </ButtonGroup>\r\n                </Card.Footer>\r\n            </Card>\r\n            <Modal show={modalShow} modalHandler={modalHandler} modalTitle=\"Add Todo Item\" onSubmit={modalSubmitHandler} item={feedItem} />\r\n        </Container>)\r\n}\r\n\r\nexport default List","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n\r\nconst PolicyModal = (props) => {\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onToggle}>\r\n            {props.policy ? <Modal.Header>Privacy Policy</Modal.Header> : <Modal.Header closeButton >Privacy Policy</Modal.Header>}\r\n            <Modal.Body>\r\n                <p>* Mejladressen och lösenord sparas för att möjliggöra login funktionaliteten. Dvs som login credentials. </p>\r\n                <p>* Både todolistor och todoitems läggs till av användaren och sparas i databasen så att användaren har sina todolistor och items på sitt konto, även nästa gång hen använder appen. </p>\r\n                <p>* Datan som samlas in fås via formulär som användaren fyller i, den säljs inte.</p>\r\n                <p>* Ens data kan tas bort genom att trycka på “delete user” efter att ha fyllt i mejl och lösenord på login skärmen.</p>\r\n            </Modal.Body>\r\n            {props.policy ?\r\n                <Modal.Footer>\r\n                    <ButtonGroup className=\"d-flex justify-content-around\">\r\n                        <Button className=\"mx-2\" variant=\"secondary\" onClick={() => { props.policy(true, props.email, props.password, props.admin) }}>Ok</Button>\r\n                        <Button className=\"mx-2\" variant=\"danger\" onClick={() => { props.policy(false) }}>Decline</Button>\r\n                    </ButtonGroup>\r\n                </Modal.Footer>\r\n                : null}\r\n        </Modal >\r\n    )\r\n}\r\n\r\nexport default PolicyModal;","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport List from './FeedItem/List';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport PolicyModal from './UI/PolicyModal';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nconst { URI } = require(\"../constants/URI\");\r\n\r\nconst Feed = (props) => {\r\n    const [data, setData] = useState(null);\r\n    const [user, setUser] = useState(null);\r\n    const [userId, setUserId] = useState(null);\r\n    const [token, setToken] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [listTitle, setListTitle] = useState(null);\r\n    const [cookieShow, setCookieShow] = useState(true);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [error, setError] = useState({\r\n        message: null,\r\n        variant: null\r\n    });\r\n\r\n    useEffect(() => {\r\n        setToken(localStorage.getItem(\"token\"));\r\n        setUser(localStorage.getItem(\"user\"));\r\n        setUserId(localStorage.getItem(\"userId\"));\r\n        fetchItems();\r\n    }, [token])\r\n\r\n    const fetchItems = async () => {\r\n        if (token && user) {\r\n            try {\r\n                const response = await fetch(URI + \"/todo\", {\r\n                    headers: {\r\n                        \"Content-Type\": 'application/json',\r\n                        \"Authorization\": 'Bearer ' + token\r\n                    }\r\n                })\r\n                const JSONdata = await response.json()\r\n                setData(JSONdata)\r\n            } catch (error) {\r\n                catchError(error);\r\n            }\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const toggleModal = () => {\r\n        setShowModal(showModal => !showModal);\r\n    }\r\n\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    };\r\n\r\n    const catchError = error => {\r\n        setError(error);\r\n    };\r\n\r\n    const listTitleHandler = (e) => {\r\n        setListTitle(e.target.value);\r\n    }\r\n\r\n    const addListHandler = async () => {\r\n        const result = await fetch(URI + \"/todo\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": 'application/json',\r\n                \"Authorization\": 'Bearer ' + token\r\n            },\r\n            body: JSON.stringify({ title: listTitle, userId: userId })\r\n        });\r\n        if (result.status !== 200 && result.status !== 201) {\r\n            const res = await result.json()\r\n            setError({\r\n                message: res.message,\r\n                variant: \"danger\"\r\n            })\r\n            return res;\r\n        }\r\n        fetchItems();\r\n        return await result.json();\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <Container className=\"text-center m-5\">\r\n                <Spinner animation=\"border\" variant=\"secondary\" size=\"lg\" />\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container className=\"justify-content-center\">\r\n                <Alert className=\"m-5\" show={cookieShow} variant=\"success\">\r\n                    <Alert.Heading>Cookie Consent</Alert.Heading>\r\n                    <p>Token sparas för att kunna hålla användaren inloggad.\r\n                        Användar ID samt mejladress sparas för att kunna personalisera användarupplevelsen genom att visa mejladressen på användaren samt användarens egna todo listor</p>\r\n                    <hr />\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <Button onClick={() => setCookieShow(false)} variant=\"outline-success\">\r\n                            Consent\r\n                        </Button>\r\n                    </div>\r\n                </Alert>\r\n\r\n                <Row className=\"justify-content-around align-content-center\"><h1 className=\"text-center mt-4\">Hi {user}, these are your Todo Items</h1></Row>\r\n                <Row className=\" align-content-center justify-content-center\"><ButtonGroup className=\"d-flex\"><Button variant=\"danger\" className=\"m-3\" size=\"sm\" onClick={props.onLogout}>Logout</Button><Button variant=\"secondary\" className=\"m-3\" size=\"sm\" onClick={toggleModal} > Show Policy</Button></ButtonGroup></Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Alert variant={error.variant} show={error.message ? true : false}>\r\n                        {error.message}\r\n                    </Alert></Row>\r\n                <Row className=\"justify-content-center mt-3\"><Col xs={8}>  <InputGroup className=\"mb-3\">\r\n                    <FormControl\r\n                        onChange={listTitleHandler}\r\n                        placeholder=\"List Title\"\r\n                        aria-label=\"list Title\"\r\n                    />\r\n                    <InputGroup.Append>\r\n                        <Button onClick={addListHandler} variant=\"outline-secondary\">Add List</Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup></Col></Row>\r\n                {\r\n                    data.items.length !== 0 ? data.items.map((item) => (\r\n                        <Row className=\"justify-content-center\" key={item._id}><Col xs={8}><List item={item} fetchItems={fetchItems} /></Col></Row>\r\n                    )) : null\r\n                }\r\n\r\n                <Row className=\"justify-content-center mt-3\"><Col xs={8}></Col></Row>\r\n                <PolicyModal showModal={showModal} onToggle={toggleModal} />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Feed;","import React, { useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport PolicyModal from '../UI/PolicyModal';\r\n\r\nconst Auth = (props) => {\r\n    const [email, setEmail] = useState(null);\r\n    const [password, setPassword] = useState(null);\r\n    const [role, setRole] = useState(false)\r\n\r\n    const emailChange = e => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const passwordChange = e => {\r\n        setPassword(e.target.value)\r\n    }\r\n\r\n    const roleChange = e => {\r\n        setRole(e.target.checked)\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <h1 className=\"text-center mt-4\">Login/Register</h1>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col xs={6}>\r\n                    <Alert variant={props.error.variant} show={props.showAlert}>\r\n                        {props.error.message}\r\n                    </Alert>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control type=\"email\" name=\"email\" onChange={emailChange} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type=\"password\" name=\"password\" onChange={passwordChange} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Check type=\"checkbox\" label=\"Admin\" name=\"admin\" onChange={roleChange} />\r\n                        </Form.Group>\r\n                        <ButtonGroup className=\"d-flex justify-content-around\">\r\n                            <Button className=\"mx-2\" variant=\"secondary\" onClick={() => { props.onLogin(email, password) }}>Login</Button>\r\n                            <Button className=\"mx-2\" variant=\"primary\" onClick={props.toggleModal} >Signup</Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup className=\"d-flex justify-content-around\">\r\n                            <Button className=\"m-2\" block variant=\"danger\" onClick={() => { props.deleteUser(email, password) }}> Delete user</Button>\r\n                        </ButtonGroup>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            <PolicyModal showModal={props.showModal} policy={props.policy} email={email} password={password} admin={role} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Auth;","import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Route, Switch, withRouter } from 'react-router-dom'\r\nimport Feed from './components/Feed';\r\nimport Auth from './components/Auth/Auth';\r\nimport './App.css';\r\nconst { URI } = require(\"./constants/URI\");\r\n\r\nfunction App() {\r\n  const [token, setToken] = useState(null);\r\n  const [isAuth, setIsAuth] = useState(false);\r\n  const [userId, setUserId] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  //const [message, setMessage] = useState('');\r\n  const [error, setError] = useState({\r\n    message: null,\r\n    variant: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, [])\r\n\r\n  const getUser = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const expiryDate = localStorage.getItem(\"expiryDate\");\r\n    if (!token || !expiryDate) {\r\n      return;\r\n    }\r\n    if (new Date(expiryDate) <= new Date()) {\r\n      logoutHandler();\r\n      return;\r\n    }\r\n    const userId = localStorage.getItem(\"userId\");\r\n    setIsAuth(true);\r\n  }\r\n\r\n  const logoutHandler = () => {\r\n    setIsAuth(false);\r\n    setToken(null);\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expiryDate\");\r\n    localStorage.removeItem(\"userId\");\r\n  }\r\n\r\n  const signupHandler = async (email, password, admin) => {\r\n    //event.preventDefault();\r\n    try {\r\n      const result = await fetch(URI + \"/user/signup\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password, admin })\r\n      });\r\n      if (result.status !== 200 && result.status !== 201) {\r\n        const res = await result.json()\r\n        setError({\r\n          message: res.message,\r\n          variant: \"danger\"\r\n        })\r\n        return res;\r\n      }\r\n      setError({\r\n        message: \"User Added\",\r\n        variant: \"success\"\r\n      })\r\n      console.log(result);\r\n      return await result.json();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const toggleModal = () => {\r\n    setShowModal(showModal => !showModal);\r\n  }\r\n\r\n  const policyModal = (accept, email, password, admin) => {\r\n    if (!accept) {\r\n      toggleModal();\r\n      return setError({ message: \"User cannot be created without accepting the privacy policy\", variant: \"danger\" });\r\n    }\r\n    if (accept === true) {\r\n      toggleModal()\r\n      signupHandler(email, password, admin);\r\n    }\r\n  }\r\n\r\n  const deleteUser = async (email, password) => {\r\n    try {\r\n      const result = await fetch(URI + \"/user/clear\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n      if (result.status !== 200 && result.status !== 201) {\r\n        const res = await result.json()\r\n        setError({\r\n          message: res.message,\r\n          variant: \"danger\"\r\n        })\r\n        return res;\r\n      }\r\n      setError({\r\n        message: \"All of your data has been removed\",\r\n        variant: \"success\"\r\n      })\r\n      return await result.json();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n\r\n  const loginHandler = async (email, password) => {\r\n    try {\r\n      const result = await fetch(URI + \"/user/login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password })\r\n      })\r\n      if (result.status !== 200 && result.status !== 201) {\r\n        const res = await result.json();\r\n        console.log(res);\r\n        setError({\r\n          message: res.message,\r\n          variant: \"danger\"\r\n        })\r\n        return res;\r\n      }\r\n      const data = await result.json();\r\n      setToken(data.token);\r\n      setUserId(data.userId);\r\n      setIsAuth(true);\r\n      localStorage.setItem(\"token\", data.token);\r\n      localStorage.setItem(\"userId\", data.userId);\r\n      localStorage.setItem(\"user\", data.user.email)\r\n      const remainingMilliseconds = 60 * 60 * 1000;\r\n      const expiryDate = new Date(\r\n        new Date().getTime() + remainingMilliseconds\r\n      );\r\n      localStorage.setItem(\"expiryDate\", expiryDate.toISOString());\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  let routes = (\r\n    <Switch>\r\n      <Route path=\"/\" exact render={props => (\r\n        <Auth deleteUser={deleteUser} policy={policyModal} showModal={showModal} onLogin={loginHandler} toggleModal={toggleModal}/*onSignup={policyModal}*/ error={error} showAlert={error.message ? true : false} />\r\n      )} />\r\n    </Switch>\r\n  )\r\n  if (isAuth) {\r\n    routes = (\r\n      <Switch>\r\n        <Route path=\"/\" exact render={props => (<Feed onLogout={logoutHandler} />)} />\r\n      </Switch>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {routes}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}